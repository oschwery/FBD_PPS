num_bins <- 9

# parameters

# The FBD is conditioned on a starting time for the process, which is the origin time #
# Specify a uniform prior on the origin #
origin_time ~ dnUnif(100.0, 200.0)

# Specify a sliding-window move on the origin_time parameter #
# This move will be applied with 3 different window widths (delta) to help improve mixing #
moves.append( mvSlide(origin_time, delta=0.01, weight=5.0) )
moves.append( mvSlide(origin_time, delta=0.1,  weight=5.0) )
moves.append( mvSlide(origin_time, delta=1,    weight=5.0) )

# the mean fossilization rate
fossilization_rate_mean ~ dnExponential(10)
fossilization_rate_mean.setValue(0.09)
moves.append(mvScale(fossilization_rate_mean, weight=2))

# the fossilization-rate mixture model
for(i in 1:num_bins) {

	fossilization_mixture_rates_quantile[i] ~ dnUniform(0,1)
	moves.append(mvSlide(fossilization_mixture_rates_quantile[i], weight=5, delta=0.25, tune=false))
	fossilization_mixture_rates_quantile[i].setValue(0.5)
	fossilization_mixture_rates[i] := qexp(fossilization_mixture_rates_quantile[i], 1 / fossilization_rate_mean)

}

fossilization_mixture_weights ~ dnDirichlet( rep(1, num_bins) )
moves.append(mvBetaSimplex(fossilization_mixture_weights, weight=5))
moves.append(mvElementSwapSimplex(fossilization_mixture_weights, weight=5))

moves.append(mvUpDownScale(weight=5))

# joint moves on the quantiles
for(i in 1:num_bins) {
	for(j in 1:num_bins) {
		moves.append(mvUpDownSlide(weight=1, tune=false, lambda=0.05))
	}
}


# the mean speciation rate
speciation_rate_mean ~ dnExponential(10)
speciation_rate_mean.setValue(0.1)
moves.append(mvScale(speciation_rate_mean, weight=2))

# the speciation-rate mixture model
for(i in 1:num_bins) {

	speciation_mixture_rates_quantile[i] ~ dnUniform(0,1)
	moves.append(mvSlide(speciation_mixture_rates_quantile[i], weight=5, delta=0.25, tune=false))
	speciation_mixture_rates_quantile[i].setValue(0.5)
	speciation_mixture_rates[i] := qexp(speciation_mixture_rates_quantile[i], 1 / speciation_rate_mean)
}

speciation_mixture_weights ~ dnDirichlet( rep(1, num_bins) )
moves.append(mvBetaSimplex(speciation_mixture_weights, weight=5))
moves.append(mvElementSwapSimplex(speciation_mixture_weights, weight=5))

# the mean extinction rate
extinction_rate_mean ~ dnExponential(10)
extinction_rate_mean.setValue(0.09)
moves.append(mvScale(extinction_rate_mean, weight=2))

# the extinction-rate mixture model
for(i in 1:num_bins) {

	extinction_mixture_rates_quantile[i] ~ dnUniform(0,1)
	moves.append(mvSlide(extinction_mixture_rates_quantile[i], weight=5, delta=0.25, tune=false))
	extinction_mixture_rates_quantile[i].setValue(0.5)
	extinction_mixture_rates[i] := qexp(extinction_mixture_rates_quantile[i], 1 / extinction_rate_mean)

}

extinction_mixture_weights ~ dnDirichlet( rep(1, num_bins) )
moves.append(mvBetaSimplex(extinction_mixture_weights, weight=5))
moves.append(mvElementSwapSimplex(extinction_mixture_weights, weight=5))

moves.append(mvUpDownScale(weight=5))

# joint moves on the quantiles
for(i in 1:num_bins) {
	for(j in 1:num_bins) {
		moves.append(mvUpDownSlide(weight=1, tune=false, lambda=0.05))
	}
}

# draw the rates for each interval
for(i in 1:(num_bins + 1)) {

	# speciation rate
    speciation_rate[i] ~ dnMixture( speciation_mixture_rates, speciation_mixture_weights )
    moves.append(mvGibbsMixtureAllocation( speciation_rate[i], weight=2 ))

	# extinction rate
    extinction_rate[i] ~ dnMixture( extinction_mixture_rates, extinction_mixture_weights )
    moves.append(mvGibbsMixtureAllocation( extinction_rate[i], weight=2 ))

	#fossilization rate
	fossilization_rate[i] ~ dnMixture( fossilization_mixture_rates, fossilization_mixture_weights )
    moves.append(mvGibbsMixtureAllocation( fossilization_rate[i], weight=2 ))


}

rho <- .05
timeline = v(20, 40, 60, 80, 100, 120, 140, 160, 180)

fbd_dist = dnFBDP(originAge=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=fossilization_rate, timeline = timeline, rho=rho, taxa=taxa, condition="sampling")

crown = clade("Martialis_heureka", "Leptanilla_swani", "Anomalomyrma_sp", "Apomyrma_stygia",
"Opamyrma_hungvuong", "Amblyopone_pallipes", "Proceratium_stictum", "Paraponera_clavata",
"Platythyrea_punctata","Pogonomyrmex_californicus", "Tatuidris_tatusia", "Leptogenys_diminuta",
"Hypoponera_opacior", "Tetraponera_punctulata", "Leptanilloides_nomada","Nothomyrmecia_macrops",
"Aneuretus_simoni","Lasius_californicus", "Formica_fusca", "Myrmica_americana" )

# The will be a random variable of a constrained topology distribution that is governed by the FBD #
# this distribution will generate FBD trees that match the monophyly constraints defined above #
constraints = v(crown)
fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints)


     moves.append(mvFNPR(fbd_tree, weight=15.0))

     moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0))

     moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=40.0))

     moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0))


 # Setup the fossil tip sampling #

 # Use a for loop to create a uniform distribution on the occurence time for each fossil #

 # The boundaries of the uniform distribution are specified in the tsv file #

 fossils = fbd_tree.getFossils()
 for(i in 1:fossils.size())
 {
     t[i] := tmrca(fbd_tree, clade(fossils[i]))
	 t[i]
     a_i = fossils[i].getMinAge()
     b_i = fossils[i].getMaxAge()

    F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
		fossil_normalized[i] := F[i]+t[i]
     F[i].clamp( 0 )
 }

 # Add a move to sample the fossil times #
moves.append( mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )


num_samp_anc := fbd_tree.numSampledAncestors()
