# Reduced summary stats for FBD trees without traits
# Orlando Schwery 22. June 2022

target = "PPS"

comm_phylo_rand = 100
comm_phylo_zscore = FALSE


# input/output directories
input_dir = "output/"
output_dir = "results/"

################################################################################
# calculate summary stats and p-values
################################################################################

print("Start summarising")

# file to hold simulation summary stats
file1 = output_dir + "summarize_trees_" + target + ".csv"

print("Summarising test statistics for...")

write(file=file1,
    "tree_length",
    "branch_length_min",
    "branch_length_max",
    "branch_length_median",
    "branch_length_var",
    "node_age_min",
    "node_age_max",
    "node_age_median",
    "node_age_var",
    "EDR_min",
    "EDR_max",
    "EDR_median",
    "EDR_var",
    "InverseES_min",
    "InverseES_max",
    "InverseES_median",
    "InverseES_var",
    "gamma_stat",
    "Colless_index",
    "num_lineages_surviving",
    "root_age",
    "n_sampled_anc",
    "n_fossils",
    sep=",",
    append=FALSE)
write(file=file1, "\n", sep=",", append=TRUE)

print("Table Headers 1 Set")


# Load data
if (target == "PPS") {
    tree = readTrees(input_dir + "antsSA5.trees")
} else if (target == "FossSim") {
    tree = readTrees(input_dir + "FossSim.trees")
}
print("loaded " + tree.size() + " trees")

for (i in 1:tree.size()) {
    ntips = tree[i].ntips()
    nnodes = tree[i].nnodes()
    node_ages = [0]
    for (j in (ntips +1):nnodes) {
        node_ages[j - ntips] = tree[i].nodeAge(j)
    }
    bl = [0]
    for (j in 1:(nnodes-1)) {
        bl[j] = tree[i].branchLength(j)
    }
    edr = tree[i].calculateEDR()
    es = tree[i].getInverseES()

    print("Starting calc-while-you-write part...")
    write(file=file1,
          tree[i].treeLength(),
          min(bl),
          max(bl),
          median(bl),
          var(bl),
          min(node_ages),
          max(node_ages),
          median(node_ages),
          var(node_ages),
          min(edr),
          max(edr),
          median(edr),
          var(edr),
          min(es),
          max(es),
          median(es),
          var(es),
          tree[i].gammaStatistic(),
          tree[i].colless(),
          tree[i].ntips(),
          tree[i].rootAge(),
          tree[i].numSampledAncestors(),
          tree[i].getFossils().size(),
          sep=",",
          append=TRUE)
        write(file=file1, "\n", sep=",", append=TRUE)
        print("done writing results " + i + " to file")
}
#    clear(tree)

#    print("done clearing trees and data")

#
print("Done.")
#q()
